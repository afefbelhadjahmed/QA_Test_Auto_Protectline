{
	"info": {
		"_postman_id": "432040b7-2e48-4292-8dac-3321ef51c260",
		"name": "1-Microservice---Instalation---ENV_QA2",
		"description": "!!!!!!Mettre à jour les variables de la collection pour l'adapter a votre gateway/devices/user/configuration/environement !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\nLes APIs exposés par la Team Usage pour les autres FT\n\nContact Support:\n Name: Team Usage\n Email: team.usages@protectline.fr",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "[TUS] - APIs- insallation",
			"item": [
				{
					"name": "token installateur",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200ok- Token généré\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.globals.set(\"access_token_Instal\", pm.response.json().access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic Y3JtOjNiZjVkNTRmLWU2MmUtNGMyNS05NWFmLThkNjBiOWYyMjliYg=="
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Cookie",
								"value": "AUTH_SESSION_ID=f07dbf39-0a94-4b2a-b34e-14124be6d6bf.keycloak-dev-1; JSESSIONID=pwVv08h9oSTKuj4R3Yvx4ZbhrrN_Z0C-bmV169kq.keycloak-dev-0"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "oks.777",
									"type": "text"
								},
								{
									"key": "password",
									"value": "1234",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://keycloak.zoneoutils.dev.protectline.fr/auth/realms/Protectline/protocol/openid-connect/token",
							"protocol": "https",
							"host": [
								"keycloak",
								"zoneoutils",
								"dev",
								"protectline",
								"fr"
							],
							"path": [
								"auth",
								"realms",
								"Protectline",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Module radio  Upgrade",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200ok-Module RADIO mis à jour\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"setTimeout(function(){}, 20000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \"type\": \"rfModuleFirmware\",  \"version\": \"latest\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/gateways/{{gwyI}}/firmware",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gateways",
								"{{gwyI}}",
								"firmware"
							]
						}
					},
					"response": []
				},
				{
					"name": "Firmware Upgrade",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200ok-Version firmware mise à jour \", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"setTimeout(function(){}, 60000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"type\": \"gatewayFirmware\",\r\n  \"version\": \"0.9.84.30\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/gateways/{{gwyI}}/firmware",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gateways",
								"{{gwyI}}",
								"firmware"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Gateway",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200ok-devicey supprimé\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/gateways/{{gwyI}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gateways",
								"{{gwyI}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "RAZ complet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200ok-Gateway/User/Contrat/devices supprimé de TB/BDD/Crow/CEGEDEV\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"gwy et devices supprimé de thingboardUser\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.thingboardUser).to.eql(\"ok\");\r",
									"});\r",
									"\r",
									"pm.test(\"Devices supprimés de thingboardUser\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.thingboardGatewayDevice).to.eql(\"ok\");\r",
									"});\r",
									"\r",
									"/*pm.test(\"Site supprimés de BDD\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.site).to.eql(\"ok\");\r",
									"});*/\r",
									"\r",
									"pm.test(\"Gwy supprimés de crow\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gateway).to.eql(\"ok\");\r",
									"});\r",
									"\r",
									"/*pm.test(\"Gwy supprimés de CEGEDEV\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.telesurveilleur).to.eql(\"ok\");\r",
									"});*/\r",
									"\r",
									"\r",
									"setTimeout(function(){}, 5000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/installation?contractId={{contract-i}}&gatewayId={{gwyI}}&userId={{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"installation"
							],
							"query": [
								{
									"key": "contractId",
									"value": "{{contract-i}}"
								},
								{
									"key": "gatewayId",
									"value": "{{gwyI}}"
								},
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new gateway V2",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n\"macAdresse\": \"0013A12023F5\",\r\n\"constructorId\": \"0013A12023F5\",\r\n\"serialNumber\": \"{{SN-GWY}}\", \r\n\"constructor\": \"Crow\", \r\n\"model\": \"{{pack}}-CONTROL PANEL 4G\", \r\n\"location\": \"Ma maison\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v2/gateways",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v2",
								"gateways"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new gateway",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200ok-Nouvelle gateway ajouté\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"GatewayId retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var gatewayId = pm.collectionVariables.get(\"gwyI\");\r",
									"    pm.expect(jsonData.gatewayId).to.eql(gatewayId);\r",
									"});\r",
									"pm.test(\"@mac retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var mac= pm.collectionVariables.get(\"parameter\");\r",
									"    pm.expect(jsonData.macAdresse).to.eql(mac);\r",
									"});\r",
									"pm.test(\"serialNumber retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var sn= pm.collectionVariables.get(\"SN-GWY\");\r",
									"    pm.expect(jsonData.serialNumber).to.eql(sn);\r",
									"});\r",
									"\r",
									"pm.test(\"Constructor crow\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.constructor).to.eql(\"Crow\");\r",
									"});\r",
									"\r",
									"pm.test(\"location de l gwy retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.location).not.to.be.empty;\r",
									"});\r",
									"\r",
									"setTimeout(function(){}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"macAdresse\": \"{{parameter}}\",\n  \"serialNumber\": \"{{SN-GWY}}\",\n  \"constructor\": \"Crow\",\n  \"model\": \"{{pack}}-CONTROL PANEL 4G\",\n  \"location\": \"Ma maison\"\n}\n"
						},
						"url": {
							"raw": "{{baseUrl}}/gateways",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gateways"
							]
						}
					},
					"response": [
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"500XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Internal server Error\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"enum\": [\n        \"crow\"\n    ],\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"enum\": [\n        \"crow\"\n    ],\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"400XX\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Bad parameter\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"enum\": [\n        \"crow\"\n    ],\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"404XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Not found\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"enum\": [\n        \"crow\"\n    ],\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Set configuration of a specific gateway",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200ok-Gateway mise a jour vec la nouvelle configuration\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"/*pm.test(\"Template groupama/orange retourné\" , function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var conf= pm.collectionVariables.get(\"config_gwy\");\r",
									"    pm.expect(jsonData.template).to.eql(conf);\r",
									"});*/\r",
									"\r",
									"pm.test(\"lastTemplateUpdateDateTime non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.lastTemplateUpdateDateTime).not.to.be.empty;\r",
									"});\r",
									"\r",
									"setTimeout(function(){}, 5000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/gateways/:gatewayId/config?status=latest",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gateways",
								":gatewayId",
								"config"
							],
							"query": [
								{
									"key": "status",
									"value": "latest",
									"description": "(Required) status"
								}
							],
							"variable": [
								{
									"key": "gatewayId",
									"value": "{{gwyI}}",
									"description": "(Required) Id of Gateway"
								}
							]
						}
					},
					"response": [
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"504XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Gateway Time-out\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/config?status=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"config"
									],
									"query": [
										{
											"key": "status",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Gateway Timeout",
							"code": 504,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"500XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Internal server Error\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/config?status=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"config"
									],
									"query": [
										{
											"key": "status",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"400XX\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Bad parameter\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/config?status=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"config"
									],
									"query": [
										{
											"key": "status",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"404XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Not found\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/config?status=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"config"
									],
									"query": [
										{
											"key": "status",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "OK",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/config?status=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"config"
									],
									"query": [
										{
											"key": "status",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Reboot GWY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200ok-devicey supprimé\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"setTimeout(function(){}, 40000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \"request\": \"reboot\"}"
						},
						"url": {
							"raw": "{{baseUrl}}/gateways/{{gwyI}}/commands",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gateways",
								"{{gwyI}}",
								"commands"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200ok-Nouveu user ajouté\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//-+------------------------------------\r",
									"pm.test(\"serialNumber retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var ui= pm.collectionVariables.get(\"userId\");\r",
									"    pm.expect(jsonData.userId).to.eql(ui);\r",
									"});\r",
									"\r",
									"pm.test(\"firstName retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.firstName).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"lastName retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.lastName).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"email retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.email).not.to.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"setTimeout(function(){}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{$randomEmail}}\",\n   \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"userId\": \"{{userId}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Add new User <br>\nNotes :\n"
					},
					"response": [
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"500XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Internal server Error\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"christophe.hubert@protectline.fr\",\n    \"firstName\": \"Christophe\",\n    \"lastName\": \"HUBERT\",\n    \"userId\": \"GGE12345678910\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"400XX\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Bad parameter\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"christophe.hubert@protectline.fr\",\n    \"firstName\": \"Christophe\",\n    \"lastName\": \"HUBERT\",\n    \"userId\": \"GGE12345678910\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"404XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Not found\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"christophe.hubert@protectline.fr\",\n    \"firstName\": \"Christophe\",\n    \"lastName\": \"HUBERT\",\n    \"userId\": \"GGE12345678910\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"christophe.hubert@protectline.fr\",\n    \"firstName\": \"Christophe\",\n    \"lastName\": \"HUBERT\",\n    \"userId\": \"GGE12345678910\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Add new gateway to a specific user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200ok-Gatewy associé au user \", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"setTimeout(function(){}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"gatewayId\": \"{{gwyI}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/gateways",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"gateways"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}",
									"description": "(Required) id of user"
								}
							]
						},
						"description": "Add new gateway to a specific user<br><br>Notes :<br><br><ul><li>Add association between User and Gateway, the gateway is created</li></ul>"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"gatewayId\": \"Crow-0013A1201610\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/gateways",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"gateways"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"400XX\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Bad parameter\",\n &nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"gatewayId\": \"Crow-0013A1201610\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/gateways",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"gateways"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"500XX\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Internal Server Error\",\n &nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"gatewayId\": \"Crow-0013A1201610\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/gateways",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"gateways"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Add new Device -KEYPAD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200ok-Keypad associé à la gatway\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"deviceId non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.deviceId).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"serialNumber retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var sn= pm.collectionVariables.get(\"SN-Keypad\");\r",
									"    pm.expect(jsonData.serialNumber).to.eql(sn);\r",
									"});\r",
									"\r",
									"pm.test(\"Constructor crow\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.constructor).to.eql(\"Crow\");\r",
									"});\r",
									"\r",
									"pm.test(\"location retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.location).not.to.be.empty;\r",
									"});\r",
									"pm.test(\"attributes retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.attributes).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"capabilities retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.capabilities).not.to.be.empty;\r",
									"});\r",
									"pm.test(\"parameters retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.parameters).not.to.be.empty;\r",
									"});\r",
									"/*pm.test(\"statusMode retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.parameters.statusMode).to.eql(\"total\");\r",
									"});*/\r",
									"setTimeout(function(){}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"serialNumber\": \"{{SN-Keypad}}\",\n  \"constructor\": \"Crow\",\n  \"model\": \"{{pack}}-KP-ADV-ISM\",\n  \"location\": \"S_0\"\n\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gateways",
								":gatewayId",
								"devices"
							],
							"variable": [
								{
									"key": "gatewayId",
									"value": "{{gwyI}}",
									"description": "(Required) Id of gateway"
								}
							]
						},
						"description": "Add new device to a specific gateway <br>\n<u>Notes</u>\n<ul>\n   <li>404 is returned when the gateway not exit on database</li>\n   <li>400 is returned when SerialNumber already on the gateway</li>\n   <li>400 is returned when Model, constructor and statusMode not respect the predefinited list</li>\n</ul>"
					},
					"response": [
						{
							"name": "{\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"400XX\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Bad parameter\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"500XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Internal server Error\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"503XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Service temporairement indisponible ou en maintenance.\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"404XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Not found\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Add new Device -PIRCAM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200ok-PIRCAM associé à la gatewy\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"deviceId non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.deviceId).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"serialNumber retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var sn= pm.collectionVariables.get(\"SN-PIRCAM\");\r",
									"    pm.expect(jsonData.serialNumber).to.eql(sn);\r",
									"});\r",
									"\r",
									"pm.test(\"Constructor crow\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.constructor).to.eql(\"Crow\");\r",
									"});\r",
									"\r",
									"pm.test(\"location retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.location).not.to.be.empty;\r",
									"});\r",
									"pm.test(\"attributes retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.attributes).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"capabilities retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.capabilities).not.to.be.empty;\r",
									"});\r",
									"pm.test(\"parameters retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.parameters).not.to.be.empty;\r",
									"});\r",
									"pm.test(\"statusMode retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.parameters.statusMode).to.eql(\"total\");\r",
									"});\r",
									"setTimeout(function(){}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"serialNumber\": \"{{SN-PIRCAM}}\",\n  \"constructor\": \"Crow\",\n  \"model\": \"{{pack}}-PIRCAM-ISM\",\n  \"location\": \"S_1\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gateways",
								":gatewayId",
								"devices"
							],
							"variable": [
								{
									"key": "gatewayId",
									"value": "{{gwyI}}",
									"description": "(Required) Id of gateway"
								}
							]
						},
						"description": "Add new device to a specific gateway <br>\n<u>Notes</u>\n<ul>\n   <li>404 is returned when the gateway not exit on database</li>\n   <li>400 is returned when SerialNumber already on the gateway</li>\n   <li>400 is returned when Model, constructor and statusMode not respect the predefinited list</li>\n</ul>"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"500XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Internal server Error\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"404XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Not found\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"503XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Service temporairement indisponible ou en maintenance.\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"400XX\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Bad parameter\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Add new Device -PIR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200ok-Pircm associé à la gatewy\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"deviceId non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.deviceId).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"serialNumber retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var sn= pm.collectionVariables.get(\"SN-PIR\");\r",
									"    pm.expect(jsonData.serialNumber).to.eql(sn);\r",
									"});\r",
									"\r",
									"pm.test(\"Constructor crow\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.constructor).to.eql(\"Crow\");\r",
									"});\r",
									"\r",
									"pm.test(\"location retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.location).not.to.be.empty;\r",
									"});\r",
									"pm.test(\"attributes retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.attributes).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"capabilities retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.capabilities).not.to.be.empty;\r",
									"});\r",
									"pm.test(\"parameters retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.parameters).not.to.be.empty;\r",
									"});\r",
									"pm.test(\"statusMode retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.parameters.statusMode).to.eql(\"total\");\r",
									"});\r",
									"\r",
									"setTimeout(function(){}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"serialNumber\": \"{{SN-PIR}}\",\n  \"constructor\": \"Crow\",\n  \"model\": \"{{pack}}-PIR-ISM\",\n  \"location\": \"S_2\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gateways",
								":gatewayId",
								"devices"
							],
							"variable": [
								{
									"key": "gatewayId",
									"value": "{{gwyI}}",
									"description": "(Required) Id of gateway"
								}
							]
						},
						"description": "Add new device to a specific gateway <br>\n<u>Notes</u>\n<ul>\n   <li>404 is returned when the gateway not exit on database</li>\n   <li>400 is returned when SerialNumber already on the gateway</li>\n   <li>400 is returned when Model, constructor and statusMode not respect the predefinited list</li>\n</ul>"
					},
					"response": [
						{
							"name": "{\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"400XX\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Bad parameter\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"503XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Service temporairement indisponible ou en maintenance.\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"404XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Not found\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"500XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Internal server Error\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Add new Device -DO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200ok-DO associé à la gatewy\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"deviceId non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.deviceId).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"serialNumber retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var sn= pm.collectionVariables.get(\"SN-DO\");\r",
									"    pm.expect(jsonData.serialNumber).to.eql(sn);\r",
									"});\r",
									"\r",
									"pm.test(\"Constructor crow\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.constructor).to.eql(\"Crow\");\r",
									"});\r",
									"\r",
									"pm.test(\"location retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.location).not.to.be.empty;\r",
									"});\r",
									"pm.test(\"attributes retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.attributes).not.to.be.empty;\r",
									"});\r",
									"\r",
									"/*pm.test(\"capabilities retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.capabilities).not.to.be.empty;\r",
									"});*/\r",
									"pm.test(\"parameters retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.parameters).not.to.be.empty;\r",
									"});\r",
									"pm.test(\"statusMode retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.parameters.statusMode).to.eql(\"partial\");\r",
									"});\r",
									"setTimeout(function(){}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"serialNumber\": \"{{SN-DO}}\",\n  \"constructor\": \"Crow\",\n  \"model\": \"{{pack}}-MAG2-ISM\",\n  \"location\": \"S_3\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gateways",
								":gatewayId",
								"devices"
							],
							"variable": [
								{
									"key": "gatewayId",
									"value": "{{gwyI}}",
									"description": "(Required) Id of gateway"
								}
							]
						},
						"description": "Add new device to a specific gateway <br>\n<u>Notes</u>\n<ul>\n   <li>404 is returned when the gateway not exit on database</li>\n   <li>400 is returned when SerialNumber already on the gateway</li>\n   <li>400 is returned when Model, constructor and statusMode not respect the predefinited list</li>\n</ul>"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"500XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Internal server Error\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"404XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Not found\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"400XX\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Bad parameter\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"503XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Service temporairement indisponible ou en maintenance.\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Add new Device -DO SHOCK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200ok-DO associé à la gatewy\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"deviceId non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.deviceId).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"serialNumber retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var sn= pm.collectionVariables.get(\"SN-DOSHOCK\");\r",
									"    pm.expect(jsonData.serialNumber).to.eql(sn);\r",
									"});\r",
									"\r",
									"pm.test(\"Constructor crow\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.constructor).to.eql(\"Crow\");\r",
									"});\r",
									"\r",
									"pm.test(\"location retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.location).not.to.be.empty;\r",
									"});\r",
									"pm.test(\"attributes retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.attributes).not.to.be.empty;\r",
									"});\r",
									"\r",
									"/*pm.test(\"capabilities retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.capabilities).not.to.be.empty;\r",
									"});*/\r",
									"pm.test(\"parameters retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.parameters).not.to.be.empty;\r",
									"});\r",
									"pm.test(\"statusMode retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.parameters.statusMode).to.eql(\"partial\");\r",
									"});\r",
									"setTimeout(function(){}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"serialNumber\": \"{{SN-DOSHOCK}}\",\n  \"constructor\": \"Crow\",\n  \"model\": \"{{pack}}-MAG-SHOCK-ISM\",\n  \"location\": \"S_4\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gateways",
								":gatewayId",
								"devices"
							],
							"variable": [
								{
									"key": "gatewayId",
									"value": "{{gwyI}}",
									"description": "(Required) Id of gateway"
								}
							]
						},
						"description": "Add new device to a specific gateway <br>\n<u>Notes</u>\n<ul>\n   <li>404 is returned when the gateway not exit on database</li>\n   <li>400 is returned when SerialNumber already on the gateway</li>\n   <li>400 is returned when Model, constructor and statusMode not respect the predefinited list</li>\n</ul>"
					},
					"response": [
						{
							"name": "{\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"400XX\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Bad parameter\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"503XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Service temporairement indisponible ou en maintenance.\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"404XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Not found\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"500XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Internal server Error\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Add new Device -SMOKE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200ok-smoke associé à la gatewy\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"deviceId non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.deviceId).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"serialNumber retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var sn= pm.collectionVariables.get(\"SN-SMOKE\");\r",
									"    pm.expect(jsonData.serialNumber).to.eql(sn);\r",
									"});\r",
									"\r",
									"pm.test(\"Constructor crow\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.constructor).to.eql(\"Crow\");\r",
									"});\r",
									"\r",
									"pm.test(\"location retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.location).not.to.be.empty;\r",
									"});\r",
									"pm.test(\"attributes retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.attributes).not.to.be.empty;\r",
									"});\r",
									"\r",
									"/*pm.test(\"capabilities retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.capabilities).not.to.be.empty;\r",
									"});*/\r",
									"pm.test(\"parameters retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.parameters).not.to.be.empty;\r",
									"});\r",
									"pm.test(\"statusMode retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.parameters.statusMode).to.eql(\"24h\");\r",
									"});\r",
									"setTimeout(function(){}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"serialNumber\": \"{{SN-SMOKE}}\",\n  \"constructor\": \"Crow\",\n  \"model\": \"{{pack}}-SMK-ISM\",\n  \"location\": \"S_5\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gateways",
								":gatewayId",
								"devices"
							],
							"variable": [
								{
									"key": "gatewayId",
									"value": "{{gwyI}}",
									"description": "(Required) Id of gateway"
								}
							]
						},
						"description": "Add new device to a specific gateway <br>\n<u>Notes</u>\n<ul>\n   <li>404 is returned when the gateway not exit on database</li>\n   <li>400 is returned when SerialNumber already on the gateway</li>\n   <li>400 is returned when Model, constructor and statusMode not respect the predefinited list</li>\n</ul>"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"500XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Internal server Error\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"503XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Service temporairement indisponible ou en maintenance.\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"404XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Not found\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"400XX\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Bad parameter\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Add new Device -FLOOD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200ok-FLOOD associé à la gatewy\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"deviceId non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.deviceId).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"serialNumber retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var sn= pm.collectionVariables.get(\"SN-FLOOD\");\r",
									"    pm.expect(jsonData.serialNumber).to.eql(sn);\r",
									"});\r",
									"\r",
									"pm.test(\"Constructor crow\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.constructor).to.eql(\"Crow\");\r",
									"});\r",
									"\r",
									"pm.test(\"location retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.location).not.to.be.empty;\r",
									"});\r",
									"pm.test(\"attributes retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.attributes).not.to.be.empty;\r",
									"});\r",
									"\r",
									"/*pm.test(\"capabilities retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.capabilities).not.to.be.empty;\r",
									"});*/\r",
									"pm.test(\"parameters retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.parameters).not.to.be.empty;\r",
									"});\r",
									"pm.test(\"statusMode retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.parameters.statusMode).to.eql(\"24h\");\r",
									"});\r",
									"setTimeout(function(){}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"serialNumber\": {{SN-FLOOD}},\n  \"constructor\": \"Crow\",\n  \"model\": \"GRP-FLOOD-ISM\",\n  \"location\": \"S_6\"\n  \n}\n"
						},
						"url": {
							"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gateways",
								":gatewayId",
								"devices"
							],
							"variable": [
								{
									"key": "gatewayId",
									"value": "{{gwyI}}",
									"description": "(Required) Id of gateway"
								}
							]
						},
						"description": "Add new device to a specific gateway <br>\n<u>Notes</u>\n<ul>\n   <li>404 is returned when the gateway not exit on database</li>\n   <li>400 is returned when SerialNumber already on the gateway</li>\n   <li>400 is returned when Model, constructor and statusMode not respect the predefinited list</li>\n</ul>"
					},
					"response": [
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"404XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Not found\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"503XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Service temporairement indisponible ou en maintenance.\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"400XX\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Bad parameter\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"500XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Internal server Error\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Add new Device -SIRENE EXT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200ok-SIRENE-EXT associé à la gatewy\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"deviceId non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.deviceId).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"serialNumber retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var sn= pm.collectionVariables.get(\"SN-SIRENE EXT\");\r",
									"    pm.expect(jsonData.serialNumber).to.eql(sn);\r",
									"});\r",
									"\r",
									"pm.test(\"Constructor crow\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.constructor).to.eql(\"Crow\");\r",
									"});\r",
									"\r",
									"pm.test(\"location retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.location).not.to.be.empty;\r",
									"});\r",
									"pm.test(\"attributes retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.attributes).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"capabilities retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.capabilities).not.to.be.empty;\r",
									"});\r",
									"pm.test(\"parameters retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.parameters).not.to.be.empty;\r",
									"});\r",
									"\r",
									"setTimeout(function(){}, 1000);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\n  \"serialNumber\": {{SN-SIRENE EXT}},\n  \"constructor\": \"Crow\",\n  \"model\": \"{{pack}}-SIREN-EXT-ISM\",\n  \"location\": \"jardin\"\n  \n}"
						},
						"url": {
							"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gateways",
								":gatewayId",
								"devices"
							],
							"variable": [
								{
									"key": "gatewayId",
									"value": "{{gwyI}}",
									"description": "(Required) Id of gateway"
								}
							]
						},
						"description": "Add new device to a specific gateway <br>\n<u>Notes</u>\n<ul>\n   <li>404 is returned when the gateway not exit on database</li>\n   <li>400 is returned when SerialNumber already on the gateway</li>\n   <li>400 is returned when Model, constructor and statusMode not respect the predefinited list</li>\n</ul>"
					},
					"response": [
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"404XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Not found\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"500XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Internal server Error\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"400XX\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Bad parameter\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"503XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Service temporairement indisponible ou en maintenance.\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Add new Device -SIRENE INT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200ok-SIRENE-EXT associé à la gatewy\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"deviceId non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.deviceId).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"serialNumber retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var sn= pm.collectionVariables.get(\"SN-SIRENE INT\");\r",
									"    pm.expect(jsonData.serialNumber).to.eql(sn);\r",
									"});\r",
									"\r",
									"pm.test(\"Constructor crow\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.constructor).to.eql(\"Crow\");\r",
									"});\r",
									"\r",
									"pm.test(\"location retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.location).not.to.be.empty;\r",
									"});\r",
									"pm.test(\"attributes retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.attributes).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"capabilities retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.capabilities).not.to.be.empty;\r",
									"});\r",
									"pm.test(\"parameters retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.parameters).not.to.be.empty;\r",
									"});\r",
									"\r",
									"setTimeout(function(){}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\n  \"serialNumber\": {{SN-SIRENE INT}},\n  \"constructor\": \"Crow\",\n  \"model\": \"{{pack}}-SIREN-EXT-ISM\",\n  \"location\": \"S_1\"\n  \n}"
						},
						"url": {
							"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gateways",
								":gatewayId",
								"devices"
							],
							"variable": [
								{
									"key": "gatewayId",
									"value": "{{gwyI}}",
									"description": "(Required) Id of gateway"
								}
							]
						},
						"description": "Add new device to a specific gateway <br>\n<u>Notes</u>\n<ul>\n   <li>404 is returned when the gateway not exit on database</li>\n   <li>400 is returned when SerialNumber already on the gateway</li>\n   <li>400 is returned when Model, constructor and statusMode not respect the predefinited list</li>\n</ul>"
					},
					"response": [
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"500XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Internal server Error\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"400XX\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Bad parameter\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"503XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Service temporairement indisponible ou en maintenance.\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"404XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Not found\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Add localUser to a specific gateway-1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"accessCode\", 1 + pm.variables.replaceIn('{{$randomInt}}') );\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200ok- Nouveau localuser ajouté\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"firstName retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.firstName).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"lastName retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.lastName).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"localAccesCode retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.localAccesCode).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"localUserId généré\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.localUserId).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"state enable\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.state).to.eql(\"enable\");\r",
									"});\r",
									"pm.test(\"notificationActiveting retourné false\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.notificationActiveting).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"notificationDisactiveting retourné false\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.notificationDisactiveting).to.eql(false);\r",
									"});\r",
									"\r",
									"//--------------recup localuserid-----------------------------------------------------------------------------------------------------\r",
									"    pm.test(\"localuser id non vide et récupéré\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var idu = jsonData.localUserId;\r",
									"\r",
									"    var data = String(idu);\r",
									"pm.globals.set(\"localuserid1@\", idu);\r",
									"var res = data.replace(\"@\", \"%40\");\r",
									"pm.globals.set(\"localuserid-inst\", res);\r",
									"\r",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"description": "Authorization",
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"localAccesCode\": \"1111\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/gateways/:gatewayId/localUsers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gateways",
								":gatewayId",
								"localUsers"
							],
							"variable": [
								{
									"key": "gatewayId",
									"value": "{{gwyI}}",
									"description": "(Required) gatewayId"
								}
							]
						},
						"description": "Add localUser to a specific gateway\r\n\r\nNotes :\r\n\r\n<ul><li>504 is returned when the gateway exit on the database and offline</li><li>500 is returned when Intern error</li><li>400 is returned when required feilds is empty or null</li><li>40035 is returned when localAcessCode already exist</li><li>40401 is returned when gateway is undefined</li><li>40404 is returned when userId not found</li></ul>"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Authorization",
										"key": "Authorization",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"localAccesCode\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/localUsers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"localUsers"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Add device to a specific local user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200ok-Device associé au nouveau localuser\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"200ok-Device associé au nouveau localuser\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"deviceId non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.deviceId).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"serialNumber retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    //var sn= pm.collectionVariables.get(\"SN-REMOTE\");\r",
									"    pm.expect(jsonData.serialNumber).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Constructor crow\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.constructor).to.eql(\"Crow\");\r",
									"});\r",
									"\r",
									"pm.test(\"location retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.location).not.to.be.empty;\r",
									"});\r",
									"//------------recupéré le remote--------------------------------------\r",
									"pm.test(\"Device id du remote ajouté non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.deviceId).not.to.be.empty;\r",
									"pm.globals.set(\"remoteadd\", pm.response.json().deviceId);\r",
									"    });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authorization",
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"serialNumber\": {{$randomInt}},\n  \"constructor\": \"Crow\",\n  \"model\": \"{{pack}}-RMTW-ISM\",\n  \"location\": \"S_1_Remote2\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/gateways/:gatewayId/localUsers/:localUserId/devices",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gateways",
								":gatewayId",
								"localUsers",
								":localUserId",
								"devices"
							],
							"variable": [
								{
									"key": "gatewayId",
									"value": "{{gwyI}}",
									"description": "(Required) gatewayId"
								},
								{
									"key": "localUserId",
									"value": "{{localuserid-inst}}",
									"description": "(Required) localUserId"
								}
							]
						},
						"description": "Add new badge or remote to a specific local user\r\n\r\nNotes :\r\n\r\n404 is returned when the gateway not exit on database\r\n504 is returned when the gateway exit on the database and offline\r\n400 is returned when Model, constructor not respect the predefinited list\r\nOnly 1 badge and 1 remote can be associate to a local user\r\nParameter does not need to be defined"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) Authorization",
										"key": "Authorization",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/localUsers/:localUserId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"localUsers",
										":localUserId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										},
										{
											"key": "localUserId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Add localUser to a specific gateway-2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"accesscode2 = Math.floor(Math.random() * 3000) + 1000;\r",
									"pm.globals.set(\"accessCode\", accesscode2 );"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200ok- Deuxiéme localuser ajouté\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"firstName retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.firstName).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"lastName retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.lastName).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"localAccesCode retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.localAccesCode).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"localUserId généré\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.localUserId).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"state enable\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.state).to.eql(\"enable\");\r",
									"});\r",
									"pm.test(\"notificationActiveting retourné false\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.notificationActiveting).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"notificationDisactiveting retourné false\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.notificationDisactiveting).to.eql(false);\r",
									"});\r",
									"\r",
									"//--------------recup localuserid2-----------------------------------------------------------------------------------------------------\r",
									"\r",
									"    pm.test(\"localuser id non vide et récupéré\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var idu = jsonData.localUserId;\r",
									"    var data = String(idu);\r",
									"pm.globals.set(\"localuserid2@\", idu);\r",
									"var res = data.replace(\"@\", \"%40\");\r",
									"pm.globals.set(\"localuserid-inst2\", res);\r",
									" });\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"description": "Authorization",
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"localAccesCode\": \"2222\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/gateways/:gatewayId/localUsers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gateways",
								":gatewayId",
								"localUsers"
							],
							"variable": [
								{
									"description": "(Required) gatewayId",
									"key": "gatewayId",
									"value": "{{gwyI}}"
								}
							]
						},
						"description": "Add localUser to a specific gateway\r\n\r\nNotes :\r\n\r\n<ul><li>504 is returned when the gateway exit on the database and offline</li><li>500 is returned when Intern error</li><li>400 is returned when required feilds is empty or null</li><li>40035 is returned when localAcessCode already exist</li><li>40401 is returned when gateway is undefined</li><li>40404 is returned when userId not found</li></ul>"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Authorization",
										"key": "Authorization",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"localAccesCode\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/localUsers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"localUsers"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Add device to a specific local user-remote",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200ok-Device associé au nouveau localuser\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"deviceId non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.deviceId).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"serialNumber retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var sn= pm.collectionVariables.get(\"SN-REMOTE\");\r",
									"    pm.expect(jsonData.serialNumber).to.eql(sn);\r",
									"});\r",
									"\r",
									"pm.test(\"Constructor crow\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.constructor).to.eql(\"Crow\");\r",
									"});\r",
									"\r",
									"pm.test(\"location retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.location).not.to.be.empty;\r",
									"});\r",
									"//--------------------recupéré le remote--------------------------------------\r",
									"pm.test(\"Device id du remote ajouté non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.deviceId).not.to.be.empty;\r",
									"pm.globals.set(\"remoteadd2\", pm.response.json().deviceId);\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authorization",
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"serialNumber\": {{SN-REMOTE}},\n  \"constructor\": \"Crow\",\n  \"model\": \"{{pack}}-RMTW-ISM\",\n  \"location\": \"S_1_Remote\"\n\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/gateways/:gatewayId/localUsers/:localUserId/devices",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gateways",
								":gatewayId",
								"localUsers",
								":localUserId",
								"devices"
							],
							"variable": [
								{
									"key": "gatewayId",
									"value": "{{gwyI}}",
									"description": "(Required) gatewayId"
								},
								{
									"key": "localUserId",
									"value": "{{localuserid-inst2}}",
									"description": "(Required) localUserId"
								}
							]
						},
						"description": "Add new badge or remote to a specific local user\r\n\r\nNotes :\r\n\r\n404 is returned when the gateway not exit on database\r\n504 is returned when the gateway exit on the database and offline\r\n400 is returned when Model, constructor not respect the predefinited list\r\nOnly 1 badge and 1 remote can be associate to a local user\r\nParameter does not need to be defined"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) Authorization",
										"key": "Authorization",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"string\",\n    \"example\": \"Crow\",\n    \"default\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/localUsers/:localUserId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"localUsers",
										":localUserId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										},
										{
											"key": "localUserId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Add localUser to a specific gateway-3",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"accesscode2 = Math.floor(Math.random() * 3000) + 1000;\r",
									"pm.globals.set(\"accessCode\", accesscode2 );"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200ok- Deuxiéme localuser ajouté\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//-------------------------------------------------------\r",
									"pm.test(\"firstName retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.firstName).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"lastName retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.lastName).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"localAccesCode retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.localAccesCode).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"localUserId généré\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.localUserId).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"state enable\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.state).to.eql(\"enable\");\r",
									"});\r",
									"pm.test(\"notificationActiveting retourné false\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.notificationActiveting).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"notificationDisactiveting retourné false\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.notificationDisactiveting).to.eql(false);\r",
									"});\r",
									"\r",
									"//--------------recup localuserid2-----------------------------------------------------------------------------------------------------\r",
									"\r",
									" pm.test(\"localuser id non vide et récupéré\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var idu = jsonData.localUserId;\r",
									"    var data = String(idu);\r",
									"pm.globals.set(\"localuserid3@\", idu);\r",
									"    var res = data.replace(\"@\", \"%40\");\r",
									"    pm.globals.set(\"localuserid-inst3\", res);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"description": "Authorization",
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"localAccesCode\": \"{{accessCode}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/gateways/:gatewayId/localUsers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gateways",
								":gatewayId",
								"localUsers"
							],
							"variable": [
								{
									"description": "(Required) gatewayId",
									"key": "gatewayId",
									"value": "{{gwyI}}"
								}
							]
						},
						"description": "Add localUser to a specific gateway\r\n\r\nNotes :\r\n\r\n<ul><li>504 is returned when the gateway exit on the database and offline</li><li>500 is returned when Intern error</li><li>400 is returned when required feilds is empty or null</li><li>40035 is returned when localAcessCode already exist</li><li>40401 is returned when gateway is undefined</li><li>40404 is returned when userId not found</li></ul>"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Authorization",
										"key": "Authorization",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"localAccesCode\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/localUsers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"localUsers"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "delete devices of a specific localUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204- Remote supprimé\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"description": "Authorization",
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/gateways/:gatewayId/localUsers/:localUserId/devices/:deviceId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gateways",
								":gatewayId",
								"localUsers",
								":localUserId",
								"devices",
								":deviceId"
							],
							"variable": [
								{
									"description": "(Required) Id of gateway",
									"key": "gatewayId",
									"value": "{{gwyI}}"
								},
								{
									"description": "(Required) id of local User",
									"key": "localUserId",
									"value": "{{localuserid-inst}}"
								},
								{
									"description": "(Required) id of device",
									"key": "deviceId",
									"value": "{{remoteadd}}"
								}
							]
						},
						"description": "delete badge or remote of a specific localUser <br>\n<u>Notes</u>\n<ul>\n   <li>404 is returned when the gateway or user or device not exit on database</li>\n   <li>504 is returned when the gateway exsit on the database and offline</li>\n   <li>500 is returned when internal server error</li>\n</ul>"
					},
					"response": [
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"504XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Gateway is offline or unreachable\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\r\n}",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									},
									{
										"description": "Authorization",
										"key": "Authorization",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/localUsers/:localUserId/devices/:deviceId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"localUsers",
										":localUserId",
										"devices",
										":deviceId"
									],
									"variable": [
										{
											"key": "gatewayId"
										},
										{
											"key": "localUserId"
										},
										{
											"key": "deviceId"
										}
									]
								}
							},
							"status": "Gateway Timeout",
							"code": 504,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"500XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Internal Server Error\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\r\n}",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									},
									{
										"description": "Authorization",
										"key": "Authorization",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/localUsers/:localUserId/devices/:deviceId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"localUsers",
										":localUserId",
										"devices",
										":deviceId"
									],
									"variable": [
										{
											"key": "gatewayId"
										},
										{
											"key": "localUserId"
										},
										{
											"key": "deviceId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "OK",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									},
									{
										"description": "Authorization",
										"key": "Authorization",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/localUsers/:localUserId/devices/:deviceId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"localUsers",
										":localUserId",
										"devices",
										":deviceId"
									],
									"variable": [
										{
											"key": "gatewayId"
										},
										{
											"key": "localUserId"
										},
										{
											"key": "deviceId"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"404XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Not found\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									},
									{
										"description": "Authorization",
										"key": "Authorization",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/localUsers/:localUserId/devices/:deviceId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"localUsers",
										":localUserId",
										"devices",
										":deviceId"
									],
									"variable": [
										{
											"key": "gatewayId"
										},
										{
											"key": "localUserId"
										},
										{
											"key": "deviceId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "delete localuser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204- localuser supprimé\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/gateways/{{gwyI}}/localUsers/{{localuserid-inst3}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gateways",
								"{{gwyI}}",
								"localUsers",
								"{{localuserid-inst3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete device ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204-devicey supprimé\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/gateways/{{gwyI}}/devices/Crow-0013A12023F5_0_5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gateways",
								"{{gwyI}}",
								"devices",
								"Crow-0013A12023F5_0_5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get information about a specific gateway",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200ok-Gateway info retourné\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"GatewayId retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var gatewayId = pm.collectionVariables.get(\"gwyI\");\r",
									"    pm.expect(jsonData.gatewayId).to.eql(gatewayId);\r",
									"});\r",
									"pm.test(\"@mac retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var mac= pm.collectionVariables.get(\"parameter\");\r",
									"    pm.expect(jsonData.macAdresse).to.eql(mac);\r",
									"});\r",
									"pm.test(\"serialNumber retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var sn= pm.collectionVariables.get(\"SN-GWY\");\r",
									"    pm.expect(jsonData.serialNumber).to.eql(sn);\r",
									"});\r",
									"\r",
									"pm.test(\"Constructor crow\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.constructor).to.eql(\"Crow\");\r",
									"});\r",
									"\r",
									"pm.test(\"location retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.location).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"dernière date d'activité retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.lastActivityDateTime).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"état de connexion de la centrale (online)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.connection).to.eql(\"Online\");\r",
									"});\r",
									"\r",
									"pm.test(\"état d'instllation de la centrale\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.installationState).not.to.be.empty;\r",
									"});\r",
									"pm.test(\"état d'activation de la centrale (inactive)\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.state.status).to.eql(\"inactive\");\r",
									"});\r",
									"pm.test(\"Derniers événements remontent bien\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.events).not.to.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"template groupama/orange retourné\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var conf= pm.collectionVariables.get(\"config_gwy\");\r",
									"    pm.expect(jsonData.config.template).to.eql(conf);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"description": "(Required) Authorization",
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/gateways/:gatewayId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gateways",
								":gatewayId"
							],
							"variable": [
								{
									"key": "gatewayId",
									"value": "{{gwyI}}",
									"description": "(Required) Id of Gateway"
								}
							]
						},
						"description": "Get information about a specific gateway <br>\n<u>Notes</u>\n<ul>\n   <li>206 is returned with state=null when gateway is offline and exit on database</li>\n   <li>404 is retuned when the gateway not exit on database</li>\n</ul>"
					},
					"response": [
						{
							"name": "500 message",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authorization",
										"key": "Authorization",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authorization",
										"key": "Authorization",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get localUsers of a specific gateway ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200ok- List des locluser associé à la gteway retourné\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//-------------------------------Tous les champs du localuser retourné----------------------------------------------------------------\r",
									"\r",
									"var listOfObjects = pm.response.json();\r",
									"listOfObjects.forEach(function(entry) \r",
									"\r",
									"{ pm.test(\"Tous les champs du localuser \" + entry.localAccesCode +\" sont retournés\", function () {\r",
									"    pm.expect(entry.firstName).not.to.be.empty;\r",
									"     pm.expect(entry.lastName).not.to.be.empty;\r",
									"    pm.expect(entry.localAccesCode).not.to.be.empty;\r",
									"    pm.expect(entry.localUserId).not.to.be.empty;\r",
									"    pm.expect(entry.state).to.eql(\"enable\");\r",
									"pm.expect(entry.notificationActiveting).to.eql(false && true);\r",
									"pm.expect(entry.notificationDisactiveting).to.eql(false && true);\r",
									"\r",
									"   }) \r",
									"});\r",
									"//-----------------------------------------------------------------------------------------------\r",
									"pm.test(\"Dernier localuser ajouté exist dans la list\", function () {\r",
									"  var listOfObjects = pm.response.json();\r",
									" var localn = pm.globals.get(\"localuserid2@\");\r",
									"   listOfObjects.forEach(function(entry) {\r",
									"if(entry.localUserId==localn)\r",
									"{\r",
									"pm.response.to.have.status(200);\r",
									"}    \r",
									"});\r",
									"});\r",
									"\r",
									"//setTimeout(function(){}, 5000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"description": "Authorization",
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/gateways/:gatewayId/localUsers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gateways",
								":gatewayId",
								"localUsers"
							],
							"variable": [
								{
									"key": "gatewayId",
									"value": "{{gwyI}}",
									"description": "(Required) Id of gateway"
								}
							]
						},
						"description": "Get localUsers of a specific gateway \n\n Notes :"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									},
									{
										"description": "Authorization",
										"key": "Authorization",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/localUsers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"localUsers"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "500 message",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									},
									{
										"description": "Authorization",
										"key": "Authorization",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/localUsers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"localUsers"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									},
									{
										"description": "Authorization",
										"key": "Authorization",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/localUsers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"localUsers"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get events of a given mac gateway",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200ok- Les events de la gateway sont retourné \", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//-------------------------Tous les donneés de l'event retourné-------------------\r",
									"var listOfObjects = pm.response.json();\r",
									"\r",
									"   listOfObjects.forEach(function(entry) \r",
									"{ \r",
									"pm.test(\"Tous les donneés de l'event \" + entry.eventId + \" sont retournés\", function () {\r",
									"\r",
									"pm.expect(entry.eventId).not.to.be.empty;  \r",
									"pm.expect(entry.gatewayId).not.to.be.empty;\r",
									"pm.expect(entry.dateTimeTB).not.to.be.empty;  \r",
									"pm.expect(entry.dateTimeGateway).not.to.be.empty;\r",
									"pm.expect(entry.cid).not.to.be.empty;  \r",
									"pm.expect(entry.label).not.to.be.empty;\r",
									"//pm.expect(entry.location).not.to.be.empty;  \r",
									"//pm.expect(entry.user).not.to.be.empty;\r",
									"pm.expect(entry.type).not.to.be.empty;  \r",
									"pm.expect(entry.source).not.to.be.empty;\r",
									"\r",
									"})\r",
									"});\r",
									"\r",
									"//--------------------------user retourné pour la liste des cid -----------------------\r",
									"\r",
									"var listOfObjects = pm.response.json();\r",
									"var num= [\"1121\" ,  \"3401\" , \"1401\" , \"3441\" , \"1441\" , \"3407\" , \"1407\" , \"1444\" , \"3444\"];\r",
									"console.log(num);\r",
									"\r",
									"\r",
									"   listOfObjects.forEach(function(entry) \r",
									"{ \r",
									"    var aa = entry.cid;\r",
									"console.log(aa);\r",
									"\r",
									"if (num.indexOf(aa)!== -1) \r",
									"{\r",
									"pm.test(\"user id de l'event non vide puisque cid = \" + entry.cid , function () {\r",
									"\r",
									"pm.expect(entry.user).not.to.be.empty;\r",
									"})\r",
									"}\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"//-------------------------------------------------------------------------\r",
									"var listOfObjects = pm.response.json();\r",
									"\r",
									"   listOfObjects.forEach(function(entry) \r",
									"\r",
									"{ \r",
									"    if (entry.source !== \"gateway\"  ) \r",
									"   {\r",
									"pm.test(\"la source de l'event est device --> deviceId et location non null = \" +entry.deviceId +\" location = \" +entry.location, function () {\r",
									" \r",
									"pm.expect(entry.deviceId).not.to.be.empty; \r",
									"pm.expect(entry.location).not.to.be.empty;  \r",
									"})\r",
									"   }\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"description": "(Required) Authorization",
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/gateways/:gatewayId/events?limit=200",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gateways",
								":gatewayId",
								"events"
							],
							"query": [
								{
									"key": "eDateTime",
									"value": "2021-12-03T06:00:00Z",
									"description": "Description: filter events after this date\n Control: ISO_8601 pattern and eDateTime >sDateTime",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "200",
									"description": "Description: Limit number of events return\n Control: Min 1, Max 200e"
								},
								{
									"key": "sDateTime",
									"value": "2020-01-03T06:00:00Z",
									"description": "Description: filter events after this date\n Control: ISO_8601 pattern and eDateTime >sDateTime",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "gatewayId",
									"value": "{{gwyI}}"
								}
							]
						},
						"description": "Get events from gateway <br>\n<u>Exemple</u>\n<ul>\n   <li>limit=20 -> return last 20 events</li>\n   <li>limit=20 and eDateTime=01/01/2020 -> return last 20 events before 01/01/2020</li>\n   <li>limit=20 and sDateTime=01/01/2020 -> return last 20 events between now and 01/01/2020</li>\n   <li>limit=20 and eDateTime=01/01/2020 and sDateIme=01/12/2019 -> return last 20 events between 01/12/2019 and 01/01/2020</li>\n<ul>\n"
					},
					"response": [
						{
							"name": "500 message",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authorization",
										"key": "Authorization",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/events?eDateTime=<string>&limit=15&sDateTime=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"events"
									],
									"query": [
										{
											"key": "eDateTime",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "15"
										},
										{
											"key": "sDateTime",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authorization",
										"key": "Authorization",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/events?eDateTime=<string>&limit=15&sDateTime=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"events"
									],
									"query": [
										{
											"key": "eDateTime",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "15"
										},
										{
											"key": "sDateTime",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get devices list of a specific gateway",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200ok-La liste des Devices associé à l gateway retourné \", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//-----------------------------------------------------------------------------------------------------------------------------------------------------\r",
									"pm.test(\"Tous les deviceId retournés\", function () {\r",
									"  var listOfObjects = pm.response.json();\r",
									"listOfObjects.forEach(function(entry) \r",
									"{ pm.expect(entry.deviceId).not.to.be.empty;})\r",
									"});\r",
									"\r",
									"pm.test(\"Constructor crow\", function () {\r",
									"  var listOfObjects = pm.response.json();\r",
									"listOfObjects.forEach(function(entry) \r",
									"{pm.expect(entry.constructor).to.eql(\"Crow\");}) \r",
									"});\r",
									"pm.test(\"Tous les models retournés\", function () {\r",
									"  var listOfObjects = pm.response.json();\r",
									"listOfObjects.forEach(function(entry) \r",
									"{pm.expect(entry.model).not.to.be.empty;}) \r",
									"});\r",
									"pm.test(\"Tous les deviceType retournés\", function () {\r",
									"  var listOfObjects = pm.response.json();\r",
									"listOfObjects.forEach(function(entry) \r",
									"{pm.expect(entry.deviceType).not.to.be.empty;}) \r",
									"});\r",
									"\r",
									"pm.test(\"Tous les serialNumbers retournés\", function () {\r",
									"  var listOfObjects = pm.response.json();\r",
									"listOfObjects.forEach(function(entry) \r",
									"{pm.expect(entry.serialNumber).not.to.be.empty;}) \r",
									"});\r",
									"\r",
									"pm.test(\"Tous les locations retournés\", function () {\r",
									"  var listOfObjects = pm.response.json();\r",
									"listOfObjects.forEach(function(entry) \r",
									"{pm.expect(entry.location).not.to.be.empty;}) \r",
									"});\r",
									"\r",
									"pm.test(\"linkProtocol ism\", function () {\r",
									"  var listOfObjects = pm.response.json();\r",
									"listOfObjects.forEach(function(entry) \r",
									"{pm.expect(entry.linkProtocol).to.eql(\"ism\");}) \r",
									"});\r",
									"\r",
									"\r",
									"//-----------------------------------------------------------------------------------------------------------------------------------------------------\r",
									"\r",
									"var listOfObjects = pm.response.json();\r",
									"   listOfObjects.forEach(function(entry) \r",
									"{\r",
									"     if (entry.lastActivityDateTime!== \"\"  ) \r",
									"pm.test(\"Télémétries \" +entry.deviceType +\" remonté\", function () \r",
									"{\r",
									"pm.expect(entry.lastActivityDateTime).not.to.be.empty;  \r",
									"pm.expect(entry.attributes.rssi).not.to.be.empty;\r",
									"pm.expect(entry.attributes.temperature).not.to.be.empty\r",
									"pm.expect(entry.attributes.battery).not.to.be.empty;\r",
									"\r",
									"})\r",
									"});\r",
									"//-------------------------------------------------------------\r",
									"pm.test(\"Minimun les Télémétries d'un device remonte\" , function () \r",
									"{\r",
									"var listOfObjects = pm.response.json();\r",
									"   listOfObjects.forEach(function(entry) \r",
									"{\r",
									"     if (entry.lastActivityDateTime!== \"\"  ) \r",
									"\r",
									"pm.expect(entry.lastActivityDateTime).not.to.be.empty; \r",
									"\r",
									"})\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"description": "Authorization",
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gateways",
								":gatewayId",
								"devices"
							],
							"query": [
								{
									"key": "diagnostics",
									"value": "true",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "gatewayId",
									"value": "{{gwyI}}",
									"description": "(Required) Id of Gatway"
								}
							]
						},
						"description": "Get devices list of a specific gateway <br>\n<u>Notes</u>\n<ul>\n   <li>404 is retuned when the gateway not exit on database</li>\n   <li>200 is returned with empty list when no device is attached to the gateway</li>\n<ul>\n"
					},
					"response": [
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"500XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Internal server Error\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Authorization",
										"key": "Authorization",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"404XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Not found\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Authorization",
										"key": "Authorization",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Authorization",
										"key": "Authorization",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "getGatwayConnexionStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200ok-Statut de Connexion retourné\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"status de lagwy online\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"online\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token_Instal}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/gateways/connexion?Constructor=Crow&parameter={{parameter}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gateways",
								"connexion"
							],
							"query": [
								{
									"key": "Constructor",
									"value": "Crow",
									"description": "(Required) Constructor of device"
								},
								{
									"key": "parameter",
									"value": "{{parameter}}",
									"description": "(Required) Depend of constructor, for Crow this parameter need to be macAdress"
								}
							]
						}
					},
					"response": [
						{
							"name": "{\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"400XX\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Bad parameter\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/gateways/connexion?Authorization=<string>&Constructor=<string>&parameter=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										"connexion"
									],
									"query": [
										{
											"key": "Authorization",
											"value": "<string>"
										},
										{
											"key": "Constructor",
											"value": "<string>"
										},
										{
											"key": "parameter",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"500XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Internal server Error\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/gateways/connexion?Authorization=<string>&Constructor=<string>&parameter=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										"connexion"
									],
									"query": [
										{
											"key": "Authorization",
											"value": "<string>"
										},
										{
											"key": "Constructor",
											"value": "<string>"
										},
										{
											"key": "parameter",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/gateways/connexion?Authorization=<string>&Constructor=<string>&parameter=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										"connexion"
									],
									"query": [
										{
											"key": "Authorization",
											"value": "<string>"
										},
										{
											"key": "Constructor",
											"value": "<string>"
										},
										{
											"key": "parameter",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get information about a specific device",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200ok-La info de Device associé à l gateway retourné\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"deviceId non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.deviceId).not.to.be.empty;\r",
									"});\r",
									"pm.test(\"constructor crow\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.constructor).to.eql(\"Crow\");\r",
									"});\r",
									"pm.test(\"serialNumber non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.serialNumber).not.to.be.empty;\r",
									"    });\r",
									"    pm.test(\"capabilities retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.capabilities).not.to.be.empty;\r",
									"});\r",
									"pm.test(\"parameters retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.parameters).not.to.be.empty;\r",
									"});\r",
									"pm.test(\"statusMode retourné non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.parameters.statusMode).to.eql(\"total\");\r",
									"});\r",
									"//----------------------------------------------------------------------------------------------\r",
									"pm.test(\"lastActivityDateTime non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.lastActivityDateTime).not.to.be.empty;\r",
									"    });\r",
									"\r",
									"    pm.test(\"rssi non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.attributes.rssi).not.to.be.empty;\r",
									"    });\r",
									"\r",
									"\r",
									"    pm.test(\"temperature non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.attributes.temperature).not.to.be.empty;\r",
									"    });\r",
									"\r",
									" pm.test(\"battery non vide\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.attributes.battery).not.to.be.empty;\r",
									"    });\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"description": "(Required) Authorization",
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/gateways/:gatewayId/devices/:deviceId?diagnostics=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gateways",
								":gatewayId",
								"devices",
								":deviceId"
							],
							"query": [
								{
									"key": "diagnostics",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "gatewayId",
									"value": "{{gwyI}}"
								},
								{
									"key": "deviceId",
									"value": "{{devicex}}"
								}
							]
						},
						"description": "Get information about a specific device <br>\n<u>Notes</u>\n<ul>\n   <li>Gateway should be on the database</li>\n   <li>Device should be on the database and associated to the gateway</li>\n<ul>\n"
					},
					"response": [
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"500XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Internal server Error\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authorization",
										"key": "Authorization",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices/:deviceId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices",
										":deviceId"
									],
									"variable": [
										{
											"key": "gatewayId"
										},
										{
											"key": "deviceId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"503XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Service temporairement indisponible ou en maintenance.\"\r\n}",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authorization",
										"key": "Authorization",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices/:deviceId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices",
										":deviceId"
									],
									"variable": [
										{
											"key": "gatewayId"
										},
										{
											"key": "deviceId"
										}
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"404XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Not found\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authorization",
										"key": "Authorization",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices/:deviceId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices",
										":deviceId"
									],
									"variable": [
										{
											"key": "gatewayId"
										},
										{
											"key": "deviceId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"400XX\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Bad parameter\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authorization",
										"key": "Authorization",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices/:deviceId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices",
										":deviceId"
									],
									"variable": [
										{
											"key": "gatewayId"
										},
										{
											"key": "deviceId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Authorization",
										"key": "Authorization",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices/:deviceId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices",
										":deviceId"
									],
									"variable": [
										{
											"key": "gatewayId"
										},
										{
											"key": "deviceId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get interfaces of specific gateway",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200ok-Les interfaces de la gateway retourné\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"//---------------------------------------------------------------------------\r",
									"\r",
									"var listOfObjects = pm.response.json();\r",
									"\r",
									"   listOfObjects.forEach(function(entry) \r",
									"{ \r",
									"pm.test(\"Tous les donneés de l'interface \" + entry.type + \" sont retournés\", function () {\r",
									"\r",
									"pm.expect(entry.type).not.to.be.empty;  \r",
									"pm.expect(entry.status).not.to.be.empty;\r",
									"pm.expect(entry.definitions).not.to.be.empty;\r",
									"\r",
									"})\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/gateways/:gatewayId/interfaces",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gateways",
								":gatewayId",
								"interfaces"
							],
							"variable": [
								{
									"key": "gatewayId",
									"value": "{{gwyI}}",
									"description": "(Required) Id of Gateway"
								}
							]
						},
						"description": "Get interfaces of specific gateway <br>\nNotes\n<ul>\n   <li>Number of interface and interface type depend of gateway's model</li>\n   <li>Interface's definition depends of type</li>\n   <li>504 is returned when the gateway exit on the database and offline</li>\n</ul> <br>\n<u>Interfaces by gateway </u> <br> \nConstructor : Crow  <br> \nModel : SH-CONTROL PANEL 4G  <br> \n<ul>\n   <li>ethernet</li>\n   <li>radio</li>\n   <li>GSM</li>\n</ul> <br>\n<u>Definition of interface by type</u> <br> \n<br>\nethernet :  <br>\n<ul>\n   <li>ip (optionnal)</li>\n   <li>mask (optionnal)</li>\n   <li>gateway (optionnal)</li>\n   <li>mac (optionnal)</li>\n</ul> <br>\nradio :  <br>\n<ul>\n   <li>hardwareVersion (optionnal)</li>\n   <li>softwareVersion (optionnal)</li>\n   <li>frequence (optionnal)</li>\n</ul> <br>\nGSM :  <br>\n<ul>\n   <li>ip (optionnal)</li>\n   <li>mask (optionnal)</li>\n   <li>gateway (optionnal)</li>\n   <li>imei (optionnal)</li>\n   <li>provider (optionnal)</li>\n   <li>rssi (optionnal)</li>\n</ul> <br>\n"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/interfaces",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"interfaces"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"500XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Internal server Error\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/interfaces",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"interfaces"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"404XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Not found\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/interfaces",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"interfaces"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"400XX\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Bad parameter\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/interfaces",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"interfaces"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Update walkTest about a specific gateway\n",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200ok-walktest activé\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"status du walktest online\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"active\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"active\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/gateways/:gatewayId/walkTest",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gateways",
								":gatewayId",
								"walkTest"
							],
							"variable": [
								{
									"key": "gatewayId",
									"value": "{{gwyI}}",
									"description": "(Required) Id of Gatway"
								}
							]
						},
						"description": "Active or disactive walkTest about a specific gateway<br><br>       <u>Notes</u> \n<ul>\n   <li>After activated, you need to pull API walkTest of devices </li>\n   <li>504 is returned when the gateway exit on the database and offline</li>\n<ul>\n"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"active\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/walkTest",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"walkTest"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"500XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Internal server Error\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"active\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/walkTest",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"walkTest"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"400XX\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Bad parameter\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"active\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/walkTest",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"walkTest"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"404XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Not found\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"active\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/walkTest",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"walkTest"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get walkTestStatus of a specific device\n",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200ok-status du walktest du device x retourné\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/gateways/:gatewayId/devices/:deviceId/walkTest",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gateways",
								":gatewayId",
								"devices",
								":deviceId",
								"walkTest"
							],
							"variable": [
								{
									"key": "gatewayId",
									"value": "{{gwyI}}",
									"description": "(Required) Id of Gateway"
								},
								{
									"key": "deviceId",
									"value": "{{devicex}}",
									"description": "(Required) Id of Device"
								}
							]
						},
						"description": "Get walkTestStatus of a specific device <br><br>       <u>Notes</u> \n<ul>\n   <li>You need to pull every 2 secondes this API after activated walkTest on gateway </li>\n   <li>You need to save result in client side, because state of device returned to false speedly. For example if you close a door, DO will be false immedialtly </li>\n   <li>504 is returned when the gateway exit on the database and offline</li>\n<ul>\n"
					},
					"response": [
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"504XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Gateway Time-out\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices/:deviceId/walkTest",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices",
										":deviceId",
										"walkTest"
									],
									"variable": [
										{
											"key": "gatewayId"
										},
										{
											"key": "deviceId"
										}
									]
								}
							},
							"status": "Gateway Timeout",
							"code": 504,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"500XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Internal server Error\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices/:deviceId/walkTest",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices",
										":deviceId",
										"walkTest"
									],
									"variable": [
										{
											"key": "gatewayId"
										},
										{
											"key": "deviceId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/devices/:deviceId/walkTest",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"devices",
										":deviceId",
										"walkTest"
									],
									"variable": [
										{
											"key": "gatewayId"
										},
										{
											"key": "deviceId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Update walkTest about a specific gateway -inactive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200ok-walktest deactivé\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"status du walktest online\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"inactive\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token_Instal}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"inactive\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/gateways/:gatewayId/walkTest",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gateways",
								":gatewayId",
								"walkTest"
							],
							"variable": [
								{
									"key": "gatewayId",
									"value": "{{gwyI}}",
									"description": "(Required) Id of Gatway"
								}
							]
						},
						"description": "Active or disactive walkTest about a specific gateway<br><br>       <u>Notes</u> \n<ul>\n   <li>After activated, you need to pull API walkTest of devices </li>\n   <li>504 is returned when the gateway exit on the database and offline</li>\n<ul>\n"
					},
					"response": [
						{
							"name": "{\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"400XX\",\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Bad parameter\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"active\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/walkTest",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"walkTest"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"404XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Not found\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"active\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/walkTest",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"walkTest"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "OK",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"active\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/walkTest",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"walkTest"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "{\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"errorCode\": \"500XX\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"description\": \"Internal server Error\",\r\n&nbsp;&nbsp;&nbsp;&nbsp;\"message\": \"xxx\"\r\n}",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"active\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/gateways/:gatewayId/walkTest",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"gateways",
										":gatewayId",
										"walkTest"
									],
									"variable": [
										{
											"key": "gatewayId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "installation.teamusages.qa.protectline.fr"
		},
		{
			"key": "config_gwy",
			"value": "groupama_TSB_SH-CP-V10-8F_0.0.0_v1"
		},
		{
			"key": "pack",
			"value": "GRP"
		},
		{
			"key": "contract-i",
			"value": "GPV2010000009222"
		},
		{
			"key": "userId",
			"value": "01010890009222"
		},
		{
			"key": "userPassword",
			"value": "12345678"
		},
		{
			"key": "gwyI",
			"value": "Crow-0013A12023F5"
		},
		{
			"key": "parameter",
			"value": "0013A12023F5"
		},
		{
			"key": "pircamId",
			"value": "Crow-0013A12023F5_0_0"
		},
		{
			"key": "devicex",
			"value": "Crow-0013A12023F5_0_0"
		},
		{
			"key": "devicey",
			"value": "Crow-0013A12023F5_0_3"
		},
		{
			"key": "SN-GWY",
			"value": "0043840"
		},
		{
			"key": "SN-Keypad",
			"value": "3144591"
		},
		{
			"key": "SN-PIRCAM",
			"value": "3145798"
		},
		{
			"key": "SN-PIR",
			"value": "3156080"
		},
		{
			"key": "SN-DO",
			"value": "3115107"
		},
		{
			"key": "SN-DOSHOCK",
			"value": "31151088"
		},
		{
			"key": "SN-SMOKE",
			"value": "3361116"
		},
		{
			"key": "SN-FLOOD",
			"value": "3133889"
		},
		{
			"key": "SN-SIRENE EXT",
			"value": "3132444"
		},
		{
			"key": "SN-SIRENE INT",
			"value": "3132445"
		},
		{
			"key": "SN-REMOTE",
			"value": "2623643"
		}
	]
}